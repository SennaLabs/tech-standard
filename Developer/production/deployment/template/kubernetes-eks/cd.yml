name: Deploy to Amazon EKS Amarin Staging Api
on: workflow_dispatch

jobs:
    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        environment: amarin-staging

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_S3_ACCESS_KEY }}
                  aws-secret-access-key: ${{ secrets.AWS_S3_SECRET_KEY }}
                  aws-region: ap-southeast-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: maread-backend
                  IMAGE_TAG: ${{ github.sha }}
                  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
                  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD_BUILD }}
                  POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}
              run: |
                  DOCKER_BUILDKIT=1 docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg POSTGRES_HOST=$POSTGRES_HOST --build-arg POSTGRES_PORT=5432 --build-arg POSTGRES_USER=$POSTGRES_USER --build-arg POSTGRES_PASSWORD=$POSTGRES_PASSWORD --build-arg POSTGRES_DATABASE=$POSTGRES_DATABASE .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            - name: Install and configure kubectl
              run: |
                  curl https://storage.googleapis.com/kubernetes-release/release/v1.22.6/bin/linux/amd64/kubectl \
                    --progress-bar \
                    --location \
                    --remote-name
                  chmod +x kubectl
                  sudo mv kubectl /usr/local/bin/
                  echo ${{ secrets.KUBE_CONFIG_DATA }} | base64 --decode > kubeconfig.yaml

            - name: Deploy
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: maread-backend
                  NODE_ENV: ${{ secrets.NODE_ENV }}
              run: |
                  export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
                  export IMAGE_TAG=${{ github.sha }}
                  export KUBECONFIG=kubeconfig.yaml
                  export NODE_ENV=${{ env.NODE_ENV }}

                  envsubst < k8s/base/deployment.tmpl.yaml > k8s/base/deployment.yaml
                  envsubst < k8s/base/kustomization.tmpl.yaml > k8s/base/kustomization.yaml
                  cp kubeconfig.yaml k8s/overlays/${{ env.APP_ENV }}
                  cd k8s/overlays/${{ env.APP_ENV }}
                  kubectl kustomize . | kubectl apply -f -
                  docker system prune -f
